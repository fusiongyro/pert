{-# LANGUAGE DeriveDataTypeable, DeriveGeneric #-}
module Statistics.Distribution.Constant where

{-

This module defines a "constant" distribution. It behaves like a
distribution, but instead of representing a spread of values, it
represents a single value, or a certainty of receiving that one value.
This is helpful because it allows us to treat a constant like any
other distribution, and ask for mean, variance and "random" numbers to
be generated by it.

-}

import Data.Typeable
import Data.Data
import GHC.Generics (Generic)
import Data.Binary

import Statistics.Distribution

data ConstantDistribution = Constant Double
  deriving (Show, Eq, Read, Typeable, Data, Generic)

constant :: Double -> ConstantDistribution
constant = Constant

instance Binary ConstantDistribution

instance Distribution ConstantDistribution where
  cumulative (Constant d) x | x == d    = 1
                            | otherwise = 0

instance ContDistr ConstantDistribution where
  density = cumulative
  quantile (Constant d) _ = d

instance Mean ConstantDistribution where
  mean (Constant d) = d

instance Variance ConstantDistribution where
  variance _ = 0

instance Entropy ConstantDistribution where
  entropy _ = 0

instance MaybeMean ConstantDistribution where
  maybeMean = Just . mean
  
instance MaybeVariance ConstantDistribution where
  maybeVariance = Just . variance
  
instance MaybeEntropy ConstantDistribution where
  maybeEntropy = Just . entropy
